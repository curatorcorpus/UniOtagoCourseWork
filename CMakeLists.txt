CMAKE_MINIMUM_REQUIRED(VERSION 2.8)
PROJECT(planeFinder)

IF(UNIX)
  FIND_PACKAGE(PkgConfig REQUIRED)
ENDIF(UNIX)

# Enable C++11 compiler
INCLUDE(CheckCXXCompilerFlag)
CHECK_CXX_COMPILER_FLAG("-std=c++11" COMPILER_SUPPORTS_CXX11)
CHECK_CXX_COMPILER_FLAG("-std=c++0x" COMPILER_SUPPORTS_CXX0X)
  IF(COMPILER_SUPPORTS_CXX11)
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
    SET(LIBFREENECT2_WITH_CXX11_SUPPORT 1)
    SET(HAVE_CXX11 yes)
  ELSEIF(COMPILER_SUPPORTS_CXX0X)
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")
    SET(HAVE_CXX11 c++0x)
  ELSE()
    SET(HAVE_CXX11 no)
    MESSAGE(STATUS "The compiler ${CMAKE_CXX_COMPILER} has no C++11 support. Please use a different C++ compiler.")
ENDIF()

ADD_DEFINITIONS(-frounding-math)

# CMake Settings
SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake_modules")

FIND_PACKAGE(CGAL REQUIRED)
FIND_PACKAGE(Eigen3 REQUIRED)
FIND_PACKAGE(GMP REQUIRED)

INCLUDE_DIRECTORIES(
  
	${EIGEN3_INCLUDE_DIR}
	${CGAL_INCLUDE_DIR}
	${GMP_INCLUDE_DIR}
)

ADD_EXECUTABLE(planeFinder
  
  cmd_parser.hpp
  cmd_parser.cpp
	plane.hpp
	plane.cpp
	planeFinder.cpp
  ransac.hpp
  ransac.cpp
	SimplePly.h
	SimplePly.cpp
	rply.h
	rply.c
)

#ADD_EXECUTABLE(triangulate

# test.cpp
#)

TARGET_LINK_LIBRARIES(planeFinder 

  ${CGAL_LIBRARIES}
  ${GMP_LIBRARIES}
)

#TARGET_LINK_LIBRARIES(triangulate 

#  ${CGAL_LIBRARIES}
#  ${GMP_LIBRARIES}
#)